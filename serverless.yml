# serverless.yml

service: serverless-flask

useDotenv: true

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-offline

package:
  include:
    - src/**
  exclude:
    - '**'

custom:
  tableName: 'stories-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  wsgi:
    app: src/app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.8
  stage: ${env:STAGE}
  region: ${env:REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem

      Resource:
        - { "Fn::GetAtt": ["StoryDynamoDBTable", "Arn" ] }
  environment:
    STORY_TABLE_NAME: ${self:custom.tableName}
    LOCAL: 0

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    StoryDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
